/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package peps;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;


public class Salida extends javax.swing.JFrame {

    public Salida() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("CANTIDAD");

        jLabel2.setText("FECHA");

        jSpinner1.setModel(new javax.swing.SpinnerDateModel());

        jButton1.setText("REGISTRAR SALIDA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("(La cantidad de be ser un número menor al inventario de la primera cantidad)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        guardarSalida();
        Menu ventana = new Menu();
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void guardarSalida() {
        // Obtener los valores del formulario
        String cantidadStr = jTextField1.getText();
        Date fecha = (Date) jSpinner1.getValue();
         // Formatear la fecha
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String fechaFormateada = dateFormat.format(fecha);

        // Validar las entradas
        try {
            int cantidad = Integer.parseInt(cantidadStr);
            // Verificar si la cantidad a vender es menor o igual al inventario
            if (verificarCantidadDisponible(cantidad)) {
                // Calcular el costo de la salida utilizando el método PEPS
                double costoSalida = calcularCostoPEPS(cantidad);

                // Crear una cadena con los datos separados por comas
                String datos = cantidad + "," + costoSalida + "," + fechaFormateada;
                String datos2 = "s," + datos;

                // Escribir en el archivo salidas.txt
                try (BufferedWriter salidasWriter = new BufferedWriter(new FileWriter("salidas.txt", true))) {
                    salidasWriter.write(datos);
                    salidasWriter.newLine();  // Agregar una nueva línea para cada salida
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al guardar la salida en salidas.txt.");
                }
                
                // Escribir en el archivo operaciones.txt
                try (BufferedWriter operacionesWriter = new BufferedWriter(new FileWriter("operaciones.txt", true))) {
                    operacionesWriter.write(datos2);
                    operacionesWriter.newLine();  // Agregar una nueva línea para cada salida
                    JOptionPane.showMessageDialog(this, "Salida registrada correctamente.");
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al guardar la salida en salidas.txt.");
                }

                // Actualizar el inventario restando la cantidad vendida
                restarCantidadInventario(cantidad);
            } else {
                JOptionPane.showMessageDialog(this, "La cantidad a vender supera la disponibilidad en inventario.");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores válidos.");
        }
    }

    private boolean verificarCantidadDisponible(int cantidadAVender) {
        // Lógica para verificar si la cantidad a vender es menor o igual al inventario
        // basado en el método PEPS.
        // Devuelve true si es posible vender la cantidad especificada, de lo contrario, devuelve false.

        int inventarioActual = obtenerInventarioActual();
        return cantidadAVender <= inventarioActual;
    }

    private int obtenerInventarioActual() {
        // Lógica para obtener el inventario actual desde el archivo inventario.txt
        // Devuelve el inventario actual.

        try (BufferedReader inventarioReader = new BufferedReader(new FileReader("inventario.txt"))) {
            String lineaInventario = inventarioReader.readLine();
            return Integer.parseInt(lineaInventario);
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al leer el inventario de inventario.txt.");
            return 0;
        }
    }
    
    private void restarCantidadInventario(int cantidadAVender) {
        String cantidadStr = jTextField1.getText();
        int cantidad = Integer.parseInt(cantidadStr);
        try (BufferedReader inventarioReader = new BufferedReader(new FileReader("inventario.txt"))) {

            String lineaInventario = inventarioReader.readLine();
            int inventarioActual = Integer.parseInt(lineaInventario);

            // Cerrar el lector antes de abrir el escritor
            inventarioReader.close();

            // Abrir el escritor para escribir el nuevo inventario en el archivo
            try (BufferedWriter inventarioWriter = new BufferedWriter(new FileWriter("inventario.txt"))) {
                inventarioActual = inventarioActual - cantidad;
                inventarioWriter.write(String.valueOf(inventarioActual));
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar el inventario en inventario.txt.");
                return;
            }

        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al leer el inventario de inventario.txt.");
            return;
        }
    }
    
    
    public double calcularCostoPEPS(int cantidad) {
        double costoTotal = 0;

        List<Compra> compras = leerCompras();

        for (Compra compra : compras) {
            int cantidadDisponible = compra.getCantidad();
            double precioUnitario = compra.getPrecio();
            Date fechaEntrada = compra.getFecha();

            // Verificar si hay suficientes unidades en la entrada actual
            if (cantidadDisponible >= cantidad) {
                // Caso 1: La entrada actual tiene suficientes unidades para cubrir la salida
                costoTotal += cantidad * precioUnitario;
                compra.setCantidad(cantidadDisponible - cantidad);

                if (compra.getCantidad() == 0) {
                    // Si la cantidad en la entrada es cero, eliminar la compra
                    compras.remove(compra);
                }

                break;  // Salir del bucle, ya se cubrió toda la salida
            } else {
                // Caso 2: La entrada actual no tiene suficientes unidades para cubrir toda la salida
                costoTotal += cantidadDisponible * precioUnitario;
                cantidad -= cantidadDisponible;

                // Eliminar la compra actual
                compras.remove(compra);
            }
        }

        // Actualizar el archivo compras.txt con las modificaciones
        escribirCompras(compras);

        return costoTotal;
    }

    private List<Compra> leerCompras() {
        List<Compra> compras = new ArrayList<>();

        try (BufferedReader comprasReader = new BufferedReader(new FileReader("compras.txt"))) {
            String linea;
            while ((linea = comprasReader.readLine()) != null) {
                String[] partes = linea.split(",");
                int cantidad = Integer.parseInt(partes[0]);
                double precio = Double.parseDouble(partes[1]);
                Date fecha = new SimpleDateFormat("dd-MM-yyyy").parse(partes[2]);

                compras.add(new Compra(cantidad, precio, fecha));
            }
        } catch (IOException | ParseException e) {
            e.printStackTrace();
            System.out.println("Error al leer el archivo compras.txt.");
        }

        // Ordenar las compras por fecha (de la más antigua a la más reciente)
        Collections.sort(compras, Comparator.comparing(Compra::getFecha));

        return compras;
    }

    private void escribirCompras(List<Compra> compras) {
        try (BufferedWriter comprasWriter = new BufferedWriter(new FileWriter("compras.txt"))) {
            for (Compra compra : compras) {
                comprasWriter.write(compra.toString());
                comprasWriter.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error al escribir en el archivo compras.txt.");
        }
    }
    
        private static class Compra {
        private int cantidad;
        private double precio;
        private Date fecha;

        public Compra(int cantidad, double precio, Date fecha) {
            this.cantidad = cantidad;
            this.precio = precio;
            this.fecha = fecha;
        }

        public int getCantidad() {
            return cantidad;
        }

        public void setCantidad(int cantidad) {
            this.cantidad = cantidad;
        }

        public double getPrecio() {
            return precio;
        }

        public Date getFecha() {
            return fecha;
        }

        @Override
        public String toString() {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            return cantidad + "," + precio + "," + dateFormat.format(fecha);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Salida().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
